/**
 * Create a Topology from the Service Mapping Description.
 * 	- Uses inputEx to generate the "inputs" modules
 *		- Uses the HTTP module to "call" the service
 */
exports.expressRoutes = function(app) {

app.get('/import-smd', app.require_login, function(req, res){
   res.render('website/import-smd', {
      locals: { title: 'Tools - Import SMD', action: 'import-smd' }
   });
});

app.post('/import-smd', app.require_login, function(req, res){

	smd = JSON.parse( req.param('smd') );
	var services = smd.services;
	
	var topologies = [];

	for(var methodName in services) {
		var method = smd.services[methodName];
	
		
		// convert the method parameters into a json-schema :
	   var schemaIdentifierMap = {};
	   schemaIdentifierMap[method.name] = {
	       id: method.name,
	       type:'object',
	       properties:{}
	   };
	   for(var i = 0 ; i < method.parameters.length ; i++) {
	      var p = method.parameters[i];
	      schemaIdentifierMap[method.name].properties[p.name] = p;
	   }


		var builder = new inputEx.JsonSchema.Builder({
		  'schemaIdentifierMap': schemaIdentifierMap,
		  'defaultOptions':{
		     'showMsg':true
		  }
	   });
		var options = builder.schemaToInputEx(schemaIdentifierMap[method.name]);
		var fields = options.fields;

		var topology = {
			name: methodName,
			config: {
				modules: [
					{
							"name" : "HTTP",
							"config" : {
								"xtype" : "WireIt.FormContainer",
								"position" : [	360, 54 ]
							},
							"value" : {
								"encoding" : "application/x-www-form-urlencoded",
								"urlparams" : [],
								"url" : (smd.target || "")+(method.target || ""),
								"method" : "GET"
							}
						}
				],
				wires: [],
				properties: {
					name: methodName,
					description: "Imported from SMD"
				}
			}
		};
		
		for(var i = 0 ; i < fields.length ; i++) {
			
			var field = fields[i];
			
			topology.config.modules[0].value.urlparams.push([ field.name, "[wired]"]);
			
			topology.config.modules.push({
				"name" : "input",
				"config" : {
					"xtype" : "WireIt.FormContainer",
					"position" : [ 54, 20+i*100 ]
				},
				"value" : {	"input" : field }
			});
			
			topology.config.wires.push({
					"tgt" : {
						"moduleId" : 0,
						"terminal" : "urlparams["+i+"][1]"
					},
					"src" : {
						"moduleId" : i+1,
						"terminal" : "out"
					},
					"xtype" : "WireIt.BezierWire"
			});
		}
		
		topology.config.modules.push({
				"name" : "output",
				"config" : {
					"xtype" : "WireIt.FormContainer",
					"position" : [112*3,176*3]
				},
				"value" : {
					"name" : "result"
				}
			}
		);
		
		topology.config.wires.push({
				"tgt" : {
					"moduleId" : topology.config.modules.length-1,
					"terminal" : "in"
				},
				"src" : {
					"moduleId" : 0,
					"terminal" : "out"
				},
				"xtype" : "WireIt.BezierWire"
		});
		
		topologies.push(topology);
		
	}
	
	var topology = topologies[0];
	topology.created_at = new Date();
	
	// TODO
	//var w = new Topology(topology);
	w.user_id = req.current_user._id;
	
	w.save(function(w, docs) {

		// TODO: check if the name is already taken...
		console.log( "NEW WIRING: "+ JSON.stringify(topologies[0]) );
		console.log(docs);
		
		res.render('website/import-smd', {
	      locals: { title: 'Tools - Import SMD', action: 'index' }
	   });
	
	},function() {
		
		res.render('website/import-smd', {
	      locals: { title: 'Tools - Import SMD', action: 'index' }
	   });
	})



});

/*
    BELOW SOME CODE FROM THE INPUTEX LIBRARY AND A SHIM FOR YAHOO.lang
*/

var OP = Object.prototype,
	ARRAY_TOSTRING = '[object Array]',
 	FUNCTION_TOSTRING = '[object Function]',
 	OBJECT_TOSTRING = '[object Object]';

var lang = {
	
	isArray: function(o) { 
        return OP.toString.apply(o) === ARRAY_TOSTRING;
    },

    isBoolean: function(o) {
        return typeof o === 'boolean';
    },
    
    isFunction: function(o) {
        return (typeof o === 'function') || OP.toString.apply(o) === FUNCTION_TOSTRING;
    },
        
    isNull: function(o) {
        return o === null;
    },
     
    isNumber: function(o) {
        return typeof o === 'number' && isFinite(o);
    },
     
    isObject: function(o) {
		return (o && (typeof o === 'object' || lang.isFunction(o))) || false;
    },
      
    isString: function(o) {
        return typeof o === 'string';
    },
      
    isUndefined: function(o) {
        return typeof o === 'undefined';
    }
	
};


inputEx = {
	JsonSchema: {}
};

/**
 * @class inputEx.JsonSchema.Builder
 */
inputEx.JsonSchema.Builder = function(opts) {
	
	var options = opts || {};
	this.options  = options; 
	
	/**
	 * specify how other schema properties are mapped to inputParam properties
	 */
	this.schemaToParamMap = options.schemaToParamMap || {
		'title':'label',
		'description':'description',
		'_inputex':null	// null value means copy child key/value pairs into field options directly
	};
	
	/**
	 * @property referenceResolver
	 */
	this.referenceResolver = options.referenceResolver || null;
	
	/**
	 * options to be applied unless already specified
	 * @property defaultOptions
	 */
	this.defaultOptions = options.defaultOptions || {};	
	
	/**
	 * key is reference, value is schema
	 * @property schemaIdentifierMap
	 */
	this.schemaIdentifierMap = options.schemaIdentifierMap || {};
};

inputEx.JsonSchema.Builder.prototype = {
   
   /** 
 	 * return a schema based on the reference value default is to look up in map
    */
	defaultReferenceResolver:function(reference) {
		return this.schemaIdentifierMap[reference] || null;
	},
	
	/**
	 * Convert a JSON schema to inputEx JSON
	 * @param {JSONSchema} p
	 */
	schemaToInputEx:function(p, propertyName) {
	
	   var fieldDef = { label: propertyName, name: propertyName };
	   var schemaMap = this.schemaToParamMap;
    	var referencedSchema = p["$ref"];
		var key;
	    
	   if(referencedSchema){
	    	var new_schema = null;
	    	if(this.referenceResolver) {
		       new_schema = this.referenceResolver(referencedSchema);
		    }
	    	if(new_schema === null) {
	    		new_schema = this.defaultReferenceResolver(referencedSchema);
	    	}
	    	if(new_schema === null) {
	    		throw new Error('Schema for property : "'+propertyName+'" $references "'+referencedSchema+'", not found');
	    	}
	    	// copy options into new schema, for example we can overide presentation
	    	// of a defined schema depending on where it is used
	    	new_schema = lang.merge(new_schema);	// copy new_schema
	    	
	    	for(var pk in p) {
	    		if(p.hasOwnProperty(pk) && lang.isUndefined(new_schema[pk]) && pk != '$ref') {
	    			new_schema[pk] = p[pk];
	    		}
	    	}
	    	p = new_schema;
	   }

	   if(!p.optional) {
	      fieldDef.required = true;
	   }

	    for(key in schemaMap) {
	        if(schemaMap.hasOwnProperty(key)) {
	      	  var paramName = schemaMap[key]; 
	      	  var v = p[key];
	      	  if(!lang.isUndefined(v)) {
	      		  if(paramName === null) {
	      			  // copy / merge values from v directly into options
	      			  if(lang.isObject(v)) {
	      				  // v must be an object, copy key/value pairs into options
	      				  for(var vkey in v) {
	      					  if(v.hasOwnProperty(vkey)) {
	      						  fieldDef[vkey] = v[vkey];
	      					  }
	      				  }
	      			  }
	      		  } else {
	      			  fieldDef[paramName] = v;
	      		  }
	      	  }
	        }
	    }
	    if(!p.type) p.type = 'object';
	    var type = p.type;
	       
	       // If type is a "Union type definition", we'll use the first type for the field
	       // "array" <=>  [] <=> ["any"]
	       if(lang.isArray(type)) {
	          if(type.length === 0 || (type.length == 1 && type[0] == "any") ) {
	             type = "array";
	          }
	          else {
	             type = type[0];
	          }
	       }
	       //else if(lang.isObject(type) ) {
	          // What do we do ??
	          //console.log("type is an object !!");
	       //}
	       
	       fieldDef.type = type;
	       
	       // default value
	       if( !lang.isUndefined(p["default"]) ) {
	          fieldDef.value = p["default"];
	       }
	    
	       if(type == "array" ) {
	          fieldDef.type = "list";
	          if(lang.isObject(p.items) && !lang.isArray(p.items)) {
	        	  // when items is an object, it's a schema that describes each item in the list
	        	  fieldDef.elementType = this.schemaToInputEx(p.items, propertyName);
	          }
	
		       if(p.minItems) { fieldDef.minItems = p.minItems; }
				 if(p.maxItems) { fieldDef.maxItems = p.maxItems; }
	
	       }
	       else if(type == "object" ) {
	          fieldDef.type = "group";
	          if(p.title && lang.isUndefined(fieldDef.legend)) {
	        	  fieldDef.legend = p.title; 
	          }
	          //fieldDef = this.schemaToInputEx(p, propertyName);
	          //fieldDef = this._parseSchemaProperty(p, propertyName);
	          var fields = [];
	          if(propertyName) {
	        	  fieldDef.name = propertyName;
	          }
	
	          for(key in p.properties) {
	             if(p.properties.hasOwnProperty(key)) {
	                fields.push( this.schemaToInputEx(p.properties[key], key) );
	             }
	          }
	
	          fieldDef.fields = fields;
	          
	       }
	       else if(type == "string" && (p["enum"] || p["choices"]) ) {
	          fieldDef.type = "select";
	          
	          if(p.choices) {
	             fieldDef.choices = [];
	             for(var i = 0 ; i < p.choices.length ; i++) {
	                var o = p.choices[i];
	                fieldDef.choices[i] = { label: o.label, value: o.value };
	             }
             }
             else {
	             fieldDef.choices = [];
	             for(var i = 0 ; i < p["enum"].length ; i++) {
	                var o = p["enum"][i];
	                fieldDef.choices[i] = { label: o.label, value: o.value };
	             }
             }
	       }
	       else if(type == "string") {
	    	  if(!lang.isUndefined(p.pattern) && lang.isUndefined(fieldDef.regexp)) {
	    		  if(lang.isString(p.pattern)) {
	    			  fieldDef.regexp = new RegExp(p.pattern);
	    		  } else {
	    			  fieldDef.regexp = p.pattern;
	    		  }
	    	  }
	    	  if(!lang.isUndefined(p.maxLength) && lang.isUndefined(fieldDef.maxLength)) {
	    		  fieldDef.maxLength = p.maxLength; 
	    	  }

	    	  if(!lang.isUndefined(p.minLength) && lang.isUndefined(fieldDef.minLength)) {
	    		  fieldDef.minLength = p.minLength; 
	    	  }

	    	  if(!lang.isUndefined(p.readonly) && lang.isUndefined(fieldDef.readonly)) {
	    		  fieldDef.readonly = p.readonly; 
	    	  }

           // According to http://groups.google.com/group/json-schema/web/json-schema-possible-formats
	          if( p.format ) {
	             if(p.format == "html") {
	                fieldDef.type = "html";
	             } else if(p.format == "date") {
	                fieldDef.type = "date";
	                fieldDef.tooltipIcon = true;
	             } else if(p.format == 'url') {
	            	 fieldDef.type = 'url';
	             } else if(p.format == 'email') {
	            	 fieldDef.type = 'email';
	             } else if(p.format == 'text') {
	            	 fieldDef.type = 'text';
	             } else if(p.format == 'time') {
	                fieldDef.type = 'time';
	             } else if(p.format == 'ip-address') {
    	             fieldDef.type = 'IPv4';
    	          } else if(p.format == 'color') {
    	             fieldDef.type = 'color';
    	          }
	          }
	       }
	
			 // Override inputEx's type with the "_type" attribute
			 if( !!p["_inputex"] && !!p["_inputex"]["_type"]) {
				fieldDef.type = p["_inputex"]["_type"];
			 }
	
	    // Add the defaultOptions
	    for(var kk in this.defaultOptions) {
	        if(this.defaultOptions.hasOwnProperty(kk) && lang.isUndefined(fieldDef[kk])) {
	        	fieldDef[kk] = this.defaultOptions[kk]; 
	        }	    	
	    }
	    return fieldDef;
	}
	
};

};